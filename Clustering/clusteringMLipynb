{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "clusteringML.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "9cqsGWTFkUoK"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zA4F0MNOok1Z"
      },
      "source": [
        "##Connecting to GDrive"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "neRMZaZOrX5y",
        "outputId": "a3a22d73-9c45-4bd3-eaf6-8ee60bf5d967"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/gdrive')\n",
        "%cd /gdrive/My Drive/tubes/ML_CLS"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /gdrive\n",
            "/gdrive/My Drive/tubes/ML_CLS\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MHqULXKzSlTH"
      },
      "source": [
        "Dataset dapat diunduh pada link berikut : [WINE FOR CLUSTERING](https://www.kaggle.com/harrywang/wine-dataset-for-clustering/)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BTX9vGExop1H"
      },
      "source": [
        "##Import Library"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cPa4syLhnQO4"
      },
      "source": [
        "import pandas as pd\r\n",
        "import numpy as np\r\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zB6dSn5fSBIM"
      },
      "source": [
        "#PREPROCESSING"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IT7kuHmCotY4"
      },
      "source": [
        "##Load Dataframe"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EoMa3I1yoSnR"
      },
      "source": [
        "df = pd.read_csv('wine-clustering.csv')"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "szsjYUK3GZ5M",
        "outputId": "b664ecc0-57ee-48ff-db41-83ccf80872de"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Alcohol</th>\n",
              "      <th>Malic_Acid</th>\n",
              "      <th>Ash</th>\n",
              "      <th>Ash_Alcanity</th>\n",
              "      <th>Magnesium</th>\n",
              "      <th>Total_Phenols</th>\n",
              "      <th>Flavanoids</th>\n",
              "      <th>Nonflavanoid_Phenols</th>\n",
              "      <th>Proanthocyanins</th>\n",
              "      <th>Color_Intensity</th>\n",
              "      <th>Hue</th>\n",
              "      <th>OD280</th>\n",
              "      <th>Proline</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>14.23</td>\n",
              "      <td>1.71</td>\n",
              "      <td>2.43</td>\n",
              "      <td>15.6</td>\n",
              "      <td>127</td>\n",
              "      <td>2.80</td>\n",
              "      <td>3.06</td>\n",
              "      <td>0.28</td>\n",
              "      <td>2.29</td>\n",
              "      <td>5.64</td>\n",
              "      <td>1.04</td>\n",
              "      <td>3.92</td>\n",
              "      <td>1065</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>13.20</td>\n",
              "      <td>1.78</td>\n",
              "      <td>2.14</td>\n",
              "      <td>11.2</td>\n",
              "      <td>100</td>\n",
              "      <td>2.65</td>\n",
              "      <td>2.76</td>\n",
              "      <td>0.26</td>\n",
              "      <td>1.28</td>\n",
              "      <td>4.38</td>\n",
              "      <td>1.05</td>\n",
              "      <td>3.40</td>\n",
              "      <td>1050</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>13.16</td>\n",
              "      <td>2.36</td>\n",
              "      <td>2.67</td>\n",
              "      <td>18.6</td>\n",
              "      <td>101</td>\n",
              "      <td>2.80</td>\n",
              "      <td>3.24</td>\n",
              "      <td>0.30</td>\n",
              "      <td>2.81</td>\n",
              "      <td>5.68</td>\n",
              "      <td>1.03</td>\n",
              "      <td>3.17</td>\n",
              "      <td>1185</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>14.37</td>\n",
              "      <td>1.95</td>\n",
              "      <td>2.50</td>\n",
              "      <td>16.8</td>\n",
              "      <td>113</td>\n",
              "      <td>3.85</td>\n",
              "      <td>3.49</td>\n",
              "      <td>0.24</td>\n",
              "      <td>2.18</td>\n",
              "      <td>7.80</td>\n",
              "      <td>0.86</td>\n",
              "      <td>3.45</td>\n",
              "      <td>1480</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>13.24</td>\n",
              "      <td>2.59</td>\n",
              "      <td>2.87</td>\n",
              "      <td>21.0</td>\n",
              "      <td>118</td>\n",
              "      <td>2.80</td>\n",
              "      <td>2.69</td>\n",
              "      <td>0.39</td>\n",
              "      <td>1.82</td>\n",
              "      <td>4.32</td>\n",
              "      <td>1.04</td>\n",
              "      <td>2.93</td>\n",
              "      <td>735</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Alcohol  Malic_Acid   Ash  ...   Hue  OD280  Proline\n",
              "0    14.23        1.71  2.43  ...  1.04   3.92     1065\n",
              "1    13.20        1.78  2.14  ...  1.05   3.40     1050\n",
              "2    13.16        2.36  2.67  ...  1.03   3.17     1185\n",
              "3    14.37        1.95  2.50  ...  0.86   3.45     1480\n",
              "4    13.24        2.59  2.87  ...  1.04   2.93      735\n",
              "\n",
              "[5 rows x 13 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "sri4QKtD_GMs",
        "outputId": "43385533-7cd5-4d00-88ae-974981f7c9f5"
      },
      "source": [
        "df.describe().T"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Alcohol</th>\n",
              "      <td>178.0</td>\n",
              "      <td>13.000618</td>\n",
              "      <td>0.811827</td>\n",
              "      <td>11.03</td>\n",
              "      <td>12.3625</td>\n",
              "      <td>13.050</td>\n",
              "      <td>13.6775</td>\n",
              "      <td>14.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Malic_Acid</th>\n",
              "      <td>178.0</td>\n",
              "      <td>2.336348</td>\n",
              "      <td>1.117146</td>\n",
              "      <td>0.74</td>\n",
              "      <td>1.6025</td>\n",
              "      <td>1.865</td>\n",
              "      <td>3.0825</td>\n",
              "      <td>5.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ash</th>\n",
              "      <td>178.0</td>\n",
              "      <td>2.366517</td>\n",
              "      <td>0.274344</td>\n",
              "      <td>1.36</td>\n",
              "      <td>2.2100</td>\n",
              "      <td>2.360</td>\n",
              "      <td>2.5575</td>\n",
              "      <td>3.23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ash_Alcanity</th>\n",
              "      <td>178.0</td>\n",
              "      <td>19.494944</td>\n",
              "      <td>3.339564</td>\n",
              "      <td>10.60</td>\n",
              "      <td>17.2000</td>\n",
              "      <td>19.500</td>\n",
              "      <td>21.5000</td>\n",
              "      <td>30.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Magnesium</th>\n",
              "      <td>178.0</td>\n",
              "      <td>99.741573</td>\n",
              "      <td>14.282484</td>\n",
              "      <td>70.00</td>\n",
              "      <td>88.0000</td>\n",
              "      <td>98.000</td>\n",
              "      <td>107.0000</td>\n",
              "      <td>162.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total_Phenols</th>\n",
              "      <td>178.0</td>\n",
              "      <td>2.295112</td>\n",
              "      <td>0.625851</td>\n",
              "      <td>0.98</td>\n",
              "      <td>1.7425</td>\n",
              "      <td>2.355</td>\n",
              "      <td>2.8000</td>\n",
              "      <td>3.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Flavanoids</th>\n",
              "      <td>178.0</td>\n",
              "      <td>2.029270</td>\n",
              "      <td>0.998859</td>\n",
              "      <td>0.34</td>\n",
              "      <td>1.2050</td>\n",
              "      <td>2.135</td>\n",
              "      <td>2.8750</td>\n",
              "      <td>5.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Nonflavanoid_Phenols</th>\n",
              "      <td>178.0</td>\n",
              "      <td>0.361854</td>\n",
              "      <td>0.124453</td>\n",
              "      <td>0.13</td>\n",
              "      <td>0.2700</td>\n",
              "      <td>0.340</td>\n",
              "      <td>0.4375</td>\n",
              "      <td>0.66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Proanthocyanins</th>\n",
              "      <td>178.0</td>\n",
              "      <td>1.590899</td>\n",
              "      <td>0.572359</td>\n",
              "      <td>0.41</td>\n",
              "      <td>1.2500</td>\n",
              "      <td>1.555</td>\n",
              "      <td>1.9500</td>\n",
              "      <td>3.58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Color_Intensity</th>\n",
              "      <td>178.0</td>\n",
              "      <td>5.058090</td>\n",
              "      <td>2.318286</td>\n",
              "      <td>1.28</td>\n",
              "      <td>3.2200</td>\n",
              "      <td>4.690</td>\n",
              "      <td>6.2000</td>\n",
              "      <td>13.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Hue</th>\n",
              "      <td>178.0</td>\n",
              "      <td>0.957449</td>\n",
              "      <td>0.228572</td>\n",
              "      <td>0.48</td>\n",
              "      <td>0.7825</td>\n",
              "      <td>0.965</td>\n",
              "      <td>1.1200</td>\n",
              "      <td>1.71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>OD280</th>\n",
              "      <td>178.0</td>\n",
              "      <td>2.611685</td>\n",
              "      <td>0.709990</td>\n",
              "      <td>1.27</td>\n",
              "      <td>1.9375</td>\n",
              "      <td>2.780</td>\n",
              "      <td>3.1700</td>\n",
              "      <td>4.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Proline</th>\n",
              "      <td>178.0</td>\n",
              "      <td>746.893258</td>\n",
              "      <td>314.907474</td>\n",
              "      <td>278.00</td>\n",
              "      <td>500.5000</td>\n",
              "      <td>673.500</td>\n",
              "      <td>985.0000</td>\n",
              "      <td>1680.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                      count        mean         std  ...      50%       75%      max\n",
              "Alcohol               178.0   13.000618    0.811827  ...   13.050   13.6775    14.83\n",
              "Malic_Acid            178.0    2.336348    1.117146  ...    1.865    3.0825     5.80\n",
              "Ash                   178.0    2.366517    0.274344  ...    2.360    2.5575     3.23\n",
              "Ash_Alcanity          178.0   19.494944    3.339564  ...   19.500   21.5000    30.00\n",
              "Magnesium             178.0   99.741573   14.282484  ...   98.000  107.0000   162.00\n",
              "Total_Phenols         178.0    2.295112    0.625851  ...    2.355    2.8000     3.88\n",
              "Flavanoids            178.0    2.029270    0.998859  ...    2.135    2.8750     5.08\n",
              "Nonflavanoid_Phenols  178.0    0.361854    0.124453  ...    0.340    0.4375     0.66\n",
              "Proanthocyanins       178.0    1.590899    0.572359  ...    1.555    1.9500     3.58\n",
              "Color_Intensity       178.0    5.058090    2.318286  ...    4.690    6.2000    13.00\n",
              "Hue                   178.0    0.957449    0.228572  ...    0.965    1.1200     1.71\n",
              "OD280                 178.0    2.611685    0.709990  ...    2.780    3.1700     4.00\n",
              "Proline               178.0  746.893258  314.907474  ...  673.500  985.0000  1680.00\n",
              "\n",
              "[13 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8PKaK0C8ch4b",
        "outputId": "608f6e93-1784-4029-ac59-799609d840ff"
      },
      "source": [
        "df.isna().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Alcohol                 0\n",
              "Malic_Acid              0\n",
              "Ash                     0\n",
              "Ash_Alcanity            0\n",
              "Magnesium               0\n",
              "Total_Phenols           0\n",
              "Flavanoids              0\n",
              "Nonflavanoid_Phenols    0\n",
              "Proanthocyanins         0\n",
              "Color_Intensity         0\n",
              "Hue                     0\n",
              "OD280                   0\n",
              "Proline                 0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nX2ywhi5ow4h"
      },
      "source": [
        "##*'Float'ing* Everything"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "klJwzS1DtI3P",
        "outputId": "da2ef119-288b-482b-c182-d9182d1bb18a"
      },
      "source": [
        "df.astype('float64')\r\n",
        "df.head()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Alcohol</th>\n",
              "      <th>Malic_Acid</th>\n",
              "      <th>Ash</th>\n",
              "      <th>Ash_Alcanity</th>\n",
              "      <th>Magnesium</th>\n",
              "      <th>Total_Phenols</th>\n",
              "      <th>Flavanoids</th>\n",
              "      <th>Nonflavanoid_Phenols</th>\n",
              "      <th>Proanthocyanins</th>\n",
              "      <th>Color_Intensity</th>\n",
              "      <th>Hue</th>\n",
              "      <th>OD280</th>\n",
              "      <th>Proline</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>14.23</td>\n",
              "      <td>1.71</td>\n",
              "      <td>2.43</td>\n",
              "      <td>15.6</td>\n",
              "      <td>127</td>\n",
              "      <td>2.80</td>\n",
              "      <td>3.06</td>\n",
              "      <td>0.28</td>\n",
              "      <td>2.29</td>\n",
              "      <td>5.64</td>\n",
              "      <td>1.04</td>\n",
              "      <td>3.92</td>\n",
              "      <td>1065</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>13.20</td>\n",
              "      <td>1.78</td>\n",
              "      <td>2.14</td>\n",
              "      <td>11.2</td>\n",
              "      <td>100</td>\n",
              "      <td>2.65</td>\n",
              "      <td>2.76</td>\n",
              "      <td>0.26</td>\n",
              "      <td>1.28</td>\n",
              "      <td>4.38</td>\n",
              "      <td>1.05</td>\n",
              "      <td>3.40</td>\n",
              "      <td>1050</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>13.16</td>\n",
              "      <td>2.36</td>\n",
              "      <td>2.67</td>\n",
              "      <td>18.6</td>\n",
              "      <td>101</td>\n",
              "      <td>2.80</td>\n",
              "      <td>3.24</td>\n",
              "      <td>0.30</td>\n",
              "      <td>2.81</td>\n",
              "      <td>5.68</td>\n",
              "      <td>1.03</td>\n",
              "      <td>3.17</td>\n",
              "      <td>1185</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>14.37</td>\n",
              "      <td>1.95</td>\n",
              "      <td>2.50</td>\n",
              "      <td>16.8</td>\n",
              "      <td>113</td>\n",
              "      <td>3.85</td>\n",
              "      <td>3.49</td>\n",
              "      <td>0.24</td>\n",
              "      <td>2.18</td>\n",
              "      <td>7.80</td>\n",
              "      <td>0.86</td>\n",
              "      <td>3.45</td>\n",
              "      <td>1480</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>13.24</td>\n",
              "      <td>2.59</td>\n",
              "      <td>2.87</td>\n",
              "      <td>21.0</td>\n",
              "      <td>118</td>\n",
              "      <td>2.80</td>\n",
              "      <td>2.69</td>\n",
              "      <td>0.39</td>\n",
              "      <td>1.82</td>\n",
              "      <td>4.32</td>\n",
              "      <td>1.04</td>\n",
              "      <td>2.93</td>\n",
              "      <td>735</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Alcohol  Malic_Acid   Ash  ...   Hue  OD280  Proline\n",
              "0    14.23        1.71  2.43  ...  1.04   3.92     1065\n",
              "1    13.20        1.78  2.14  ...  1.05   3.40     1050\n",
              "2    13.16        2.36  2.67  ...  1.03   3.17     1185\n",
              "3    14.37        1.95  2.50  ...  0.86   3.45     1480\n",
              "4    13.24        2.59  2.87  ...  1.04   2.93      735\n",
              "\n",
              "[5 rows x 13 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HmhqkTHq3MJK"
      },
      "source": [
        "##Fungsi Normalisasi"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LNP5QZzZogxJ"
      },
      "source": [
        "def normal(x):\r\n",
        "  return (x-x.min()) / (x.max()-x.min())"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xJg-msI33QoU"
      },
      "source": [
        "##Menormalisasi Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dtr4HVGW1dUp"
      },
      "source": [
        "col = list(df.columns)\r\n",
        "for i in range(len(col)):\r\n",
        "  df[[col[i]]] = df[[col[i]]].apply(normal)"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "sgO03GOP1_a0",
        "outputId": "9a51e6ae-0e80-4a46-e06b-bd96e1ec0b59"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Alcohol</th>\n",
              "      <th>Malic_Acid</th>\n",
              "      <th>Ash</th>\n",
              "      <th>Ash_Alcanity</th>\n",
              "      <th>Magnesium</th>\n",
              "      <th>Total_Phenols</th>\n",
              "      <th>Flavanoids</th>\n",
              "      <th>Nonflavanoid_Phenols</th>\n",
              "      <th>Proanthocyanins</th>\n",
              "      <th>Color_Intensity</th>\n",
              "      <th>Hue</th>\n",
              "      <th>OD280</th>\n",
              "      <th>Proline</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.842105</td>\n",
              "      <td>0.191700</td>\n",
              "      <td>0.572193</td>\n",
              "      <td>0.257732</td>\n",
              "      <td>0.619565</td>\n",
              "      <td>0.627586</td>\n",
              "      <td>0.573840</td>\n",
              "      <td>0.283019</td>\n",
              "      <td>0.593060</td>\n",
              "      <td>0.372014</td>\n",
              "      <td>0.455285</td>\n",
              "      <td>0.970696</td>\n",
              "      <td>0.561341</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.571053</td>\n",
              "      <td>0.205534</td>\n",
              "      <td>0.417112</td>\n",
              "      <td>0.030928</td>\n",
              "      <td>0.326087</td>\n",
              "      <td>0.575862</td>\n",
              "      <td>0.510549</td>\n",
              "      <td>0.245283</td>\n",
              "      <td>0.274448</td>\n",
              "      <td>0.264505</td>\n",
              "      <td>0.463415</td>\n",
              "      <td>0.780220</td>\n",
              "      <td>0.550642</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.560526</td>\n",
              "      <td>0.320158</td>\n",
              "      <td>0.700535</td>\n",
              "      <td>0.412371</td>\n",
              "      <td>0.336957</td>\n",
              "      <td>0.627586</td>\n",
              "      <td>0.611814</td>\n",
              "      <td>0.320755</td>\n",
              "      <td>0.757098</td>\n",
              "      <td>0.375427</td>\n",
              "      <td>0.447154</td>\n",
              "      <td>0.695971</td>\n",
              "      <td>0.646933</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.878947</td>\n",
              "      <td>0.239130</td>\n",
              "      <td>0.609626</td>\n",
              "      <td>0.319588</td>\n",
              "      <td>0.467391</td>\n",
              "      <td>0.989655</td>\n",
              "      <td>0.664557</td>\n",
              "      <td>0.207547</td>\n",
              "      <td>0.558360</td>\n",
              "      <td>0.556314</td>\n",
              "      <td>0.308943</td>\n",
              "      <td>0.798535</td>\n",
              "      <td>0.857347</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.581579</td>\n",
              "      <td>0.365613</td>\n",
              "      <td>0.807487</td>\n",
              "      <td>0.536082</td>\n",
              "      <td>0.521739</td>\n",
              "      <td>0.627586</td>\n",
              "      <td>0.495781</td>\n",
              "      <td>0.490566</td>\n",
              "      <td>0.444795</td>\n",
              "      <td>0.259386</td>\n",
              "      <td>0.455285</td>\n",
              "      <td>0.608059</td>\n",
              "      <td>0.325963</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    Alcohol  Malic_Acid       Ash  ...       Hue     OD280   Proline\n",
              "0  0.842105    0.191700  0.572193  ...  0.455285  0.970696  0.561341\n",
              "1  0.571053    0.205534  0.417112  ...  0.463415  0.780220  0.550642\n",
              "2  0.560526    0.320158  0.700535  ...  0.447154  0.695971  0.646933\n",
              "3  0.878947    0.239130  0.609626  ...  0.308943  0.798535  0.857347\n",
              "4  0.581579    0.365613  0.807487  ...  0.455285  0.608059  0.325963\n",
              "\n",
              "[5 rows x 13 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9emGwfPdXZGG"
      },
      "source": [
        "##VISUALISASI DATA"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "uGp1Sk7yI1nq",
        "outputId": "364769ba-752a-4600-951f-3190c714185f"
      },
      "source": [
        "from sklearn.decomposition import PCA\r\n",
        "pca = PCA(n_components=2).fit(df)\r\n",
        "pca_2d = pca.transform(df)\r\n",
        "plt.scatter(pca_2d[:,0],pca_2d[:,1],c='black')\r\n",
        "plt.show()"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Crd4G2nLXds8"
      },
      "source": [
        "#FUNGSI CLUSTERISASI"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JOvvBbq6Xgiz"
      },
      "source": [
        "##PILIH INDEX CENTROID"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nYcB1oQnXuNL"
      },
      "source": [
        "def centroidindexpick(k,dfnya):\r\n",
        "  return np.random.choice(len(dfnya['Ash']),k, replace=False)"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uwyYUdvRc1eZ"
      },
      "source": [
        "##AMBIL DATA CENTROID"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Aufi7J4jYjjL"
      },
      "source": [
        "def centroidpick(key,dfq):\r\n",
        "  k = centroidindexpick(key,dfq)\r\n",
        "  centroid = []\r\n",
        "  for i in k:\r\n",
        "    centroid.append([i,list(dfq.iloc[i])])\r\n",
        "  return centroid\r\n"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CzINVCOAc5BW"
      },
      "source": [
        "##MENENTUKAN JARAK"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3lHMbPb8jSbQ"
      },
      "source": [
        "def euclidean(kiri,kanan):\r\n",
        "  sum = 0\r\n",
        "  for i in range(len(kiri)):\r\n",
        "    sum = sum + (kiri[i]-kanan[i])**2\r\n",
        "  return np.sqrt(sum)"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "chINyCLyXgp8"
      },
      "source": [
        "def jarak(dfww, centroid):\r\n",
        "  pilihcluster = []\r\n",
        "  for i in range(len(centroid)):\r\n",
        "    temp =[]\r\n",
        "    for j in range(len(list(dfww['Ash']))):\r\n",
        "      p1 = centroid[i][1]\r\n",
        "      p2 = list(dfww.iloc[j])\r\n",
        "      temp.append([str(i),euclidean(p1,p2)])\r\n",
        "    pilihcluster.append(temp)\r\n",
        "  return pilihcluster\r\n"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tmKTOKMHdbyo"
      },
      "source": [
        "##MEMILIH CLUSTER"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ugS7EsJpcFMW"
      },
      "source": [
        "def pilihcluster(jarak):\r\n",
        "  clusternya=[]\r\n",
        "  elbow = []\r\n",
        "\r\n",
        "  for i in range(len(jarak[0])):\r\n",
        "    pilihjarak = []\r\n",
        "    pilihclusterjarak = []\r\n",
        "    for j in range(len(jarak)):\r\n",
        "      pilihclusterjarak.append(jarak[j][i])\r\n",
        "      #print(pilihclusterjarak)\r\n",
        "      pilihjarak.append(jarak[j][i][1])\r\n",
        "    a = min(pilihjarak)\r\n",
        "    #print(a)\r\n",
        "    for k in range(len(pilihclusterjarak)):\r\n",
        "      if a in pilihclusterjarak[k]:\r\n",
        "        clusternya.append(int(pilihclusterjarak[k][0]))\r\n",
        "        elbow.append(pilihclusterjarak[k][1]**2)\r\n",
        "        #print(clusternya)\r\n",
        "        break\r\n",
        "    elbownya = sum(elbow)\r\n",
        "  return clusternya,elbownya\r\n"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fcfyfc9747ik"
      },
      "source": [
        "##FUNGSI ITERASI CLUSTERING"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o5oUuPQ746-R"
      },
      "source": [
        "def clusterit(dfg,k,centroid):\r\n",
        "  clust = jarak(dfg,centroid)\r\n",
        "  cluster,elbow = pilihcluster(clust)\r\n",
        "  dfgx = dfg\r\n",
        "  dfgx.insert(13,'cluster',cluster)\r\n",
        "  df3 = dfgx.groupby('cluster').mean()\r\n",
        "  df3.reset_index\r\n",
        "  #display(df3)\r\n",
        "  barucentroid = []\r\n",
        "  for i in range(k):\r\n",
        "    barucentroid.append([i,list(df3.iloc[i])])\r\n",
        "    #display(barucentroid)\r\n",
        "   # print(barucentroid)\r\n",
        "  return barucentroid"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8z5rjPlgBjGr"
      },
      "source": [
        "##FUNGSI CLUSTERING K OPTIMUM"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9LXXKNbsBr6L"
      },
      "source": [
        "def clusterfix(df2,k,centroid):\r\n",
        "  clust = jarak(df2,centroid)\r\n",
        "  cluster,elbow = pilihcluster(clust)\r\n",
        "  df21 = df2\r\n",
        "  df21.insert(13,'cluster',cluster)\r\n",
        "  df3 = df21.groupby('cluster').mean()\r\n",
        "  df3.reset_index\r\n",
        "  #display(df3)\r\n",
        "  barucentroid = []\r\n",
        "  for i in range(k):\r\n",
        "    barucentroid.append([i,list(df3.iloc[i])])\r\n",
        "  return df2, barucentroid,elbow"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Mso-aEEn43Ir"
      },
      "source": [
        "#CLUSTERISASI"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9cqsGWTFkUoK"
      },
      "source": [
        "#####JIKA TERJADI ERROR SAAT RUNNING"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mCGTSD5ufz9e"
      },
      "source": [
        "df = df.drop('cluster',axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dnt5hZkqlF00"
      },
      "source": [
        "df = pd.read_csv('wine-clustering.csv')\r\n",
        "df.astype('float64')\r\n",
        "def normal(x):\r\n",
        "  return (x-x.min()) / (x.max()-x.min())\r\n",
        "col = list(df.columns)\r\n",
        "for i in range(len(col)):\r\n",
        "  df[[col[i]]] = df[[col[i]]].apply(normal)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DGl-BIqWBJ47"
      },
      "source": [
        "##Memilih K yang paling optimal\r\n",
        "\r\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "k5r7rzsi45jT",
        "outputId": "d64a0d50-da57-41a7-99c1-f3585cb16661"
      },
      "source": [
        "a  = int(input('Jumlah iterasi K = ')) +1\r\n",
        "elbowgraph =[]\r\n",
        "for i in range(1,a):\r\n",
        "  #print(i)\r\n",
        "  centx = centroidpick(i,df)\r\n",
        "  newcent = clusterit(df,i,centx)\r\n",
        "  while (centx != newcent):\r\n",
        "    centx = newcent\r\n",
        "    df = df.drop('cluster',axis=1)\r\n",
        "    newcent = clusterit(df,i,centx)\r\n",
        "  df = df.drop('cluster',axis=1)\r\n",
        "  dfnew,fixcent,elbow = clusterfix(df,i,centx)\r\n",
        "  elbowgraph.append(elbow)\r\n",
        "  df = df.drop('cluster',axis=1)\r\n",
        "\r\n",
        "fig, ax = plt.subplots(figsize=(16,8))\r\n",
        "ax.set_title('Grafik Elbow')\r\n",
        "graphX = np.arange(1,a)\r\n",
        "ax.plot(graphX,elbowgraph,color='b',label = 'nilai WCSS')\r\n",
        "b = [elbowgraph[0],elbowgraph[a-2]]\r\n",
        "c = [1,a-1]\r\n",
        "ax.plot(c,b, color='red', ls='dashed')\r\n",
        "ax.set_xlabel('nilai k')\r\n",
        "ax.set_ylabel('WCSS')\r\n",
        "plt.show()\r\n"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Jumlah iterasi K = 10\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 1152x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bTQBm2Yzdamo"
      },
      "source": [
        "##CLUSTERING DENGAN K = 3"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 498
        },
        "id": "t8LkDPGOdUxJ",
        "outputId": "b1209a43-e95a-4e3c-df5d-e6799cc89c30"
      },
      "source": [
        "import seaborn as sns\r\n",
        "k= 3\r\n",
        "centx = centroidpick(k,df)\r\n",
        "newcent = clusterit(df,k,centx)\r\n",
        "while (centx != newcent):\r\n",
        "  centx = newcent\r\n",
        "  df = df.drop('cluster',axis=1)\r\n",
        "  newcent = clusterit(df,k,centx)\r\n",
        "df = df.drop('cluster',axis=1)\r\n",
        "dfnew,fixcent,elbow = clusterfix(df,k,centx)\r\n",
        "df = df.drop('cluster',axis=1)\r\n",
        "\r\n",
        "#  PLOTTING\r\n",
        "\r\n",
        "pca = PCA(n_components=2).fit(df)\r\n",
        "pca_2d = pca.transform(df)\r\n",
        "clusterx  =list(dfnew['cluster'])\r\n",
        "aa,ab,ba,bb,ca,cb =[],[],[],[],[],[]\r\n",
        "for i in range (len(pca_2d[:,0])):\r\n",
        "  if clusterx[i] == 0:\r\n",
        "    aa.append(pca_2d[i,0])\r\n",
        "    ab.append(pca_2d[i,1])\r\n",
        "  elif clusterx[i] == 1:\r\n",
        "    ba.append(pca_2d[i,0])\r\n",
        "    bb.append(pca_2d[i,1])\r\n",
        "  elif clusterx[i] == 2:\r\n",
        "    ca.append(pca_2d[i,0])\r\n",
        "    cb.append(pca_2d[i,1]) \r\n",
        "\r\n",
        "\r\n",
        "d = {0: fixcent[0][1], 1: fixcent[1][1], 2:fixcent[2][1]}\r\n",
        "centnyaa = pd.DataFrame(d)\r\n",
        "centnyaa = centnyaa.T\r\n",
        "\r\n",
        "pca2 = PCA(n_components=2).fit(centnyaa)\r\n",
        "pcacent = pca.transform(centnyaa)\r\n",
        "fig, ax = plt.subplots(figsize=(16,8))\r\n",
        "ax.set_title('Wine Dataset')\r\n",
        "plt.style.use('seaborn')\r\n",
        "ax.scatter(aa,ab,c='green')\r\n",
        "ax.scatter(ba,bb,c='blue')\r\n",
        "ax.scatter(ca,cb,c='red')\r\n",
        "ax.scatter(pcacent[:,0],pcacent[:,1], marker='x',color ='black')\r\n",
        "plt.show()\r\n"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "we9t3n-fO7Ci"
      },
      "source": [
        "##Jumlah Klaster"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sMwyzEPpHukx",
        "outputId": "3fd50349-d819-4892-80af-e4da76f53d69"
      },
      "source": [
        "dfnew['cluster'].value_counts()"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    63\n",
              "1    60\n",
              "2    55\n",
              "Name: cluster, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 43
        }
      ]
    }
  ]
}